{"ast":null,"code":"import _asyncToGenerator from \"/Users/raniradzewsky/Library/Mobile Documents/com~apple~CloudDocs/Documents/school/John Bryce/My Projects/Tipping around the world - Angular/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom } from 'rxjs';\nimport { appConfig } from '../utils/app-config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n  }\n  //Get all continents:\n  getContinents() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this.http.get(appConfig.continentsUrl);\n      const continents = yield firstValueFrom(observable);\n      return continents;\n    })();\n  }\n  //Get all countries:\n  getCountries() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this2.http.get(appConfig.countriesUrl);\n      const countries = yield firstValueFrom(observable);\n      return countries;\n    })();\n  }\n  //Get countries by continent:\n  getCountriesByContinent(continentId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (continentId === null) {}\n      const observable = _this3.http.get(appConfig.countriesByContinentsUrl + continentId);\n      const countries = yield firstValueFrom(observable);\n      return countries;\n    })();\n  }\n  // Add country:\n  addCountry(country) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this4.http.post(appConfig.countriesUrl, country);\n      yield firstValueFrom(observable);\n    })();\n  }\n  // Delete country:\n  deleteCountry(countryId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this5.http.delete(appConfig.countriesUrl + countryId);\n      yield firstValueFrom(observable);\n    })();\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAASA,cAAc,QAAQ,MAAM;AAIrC,SAASC,SAAS,QAAQ,qBAAqB;;;AAK/C,OAAM,MAAOC,WAAW;EACtBC,YAA2BC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAE9C;EACaC,aAAa;IAAA;IAAA;MACxB,MAAMC,UAAU,GAAG,KAAI,CAACF,IAAI,CAACG,GAAG,CAAmBN,SAAS,CAACO,aAAa,CAAC;MAC3E,MAAMC,UAAU,SAAST,cAAc,CAACM,UAAU,CAAC;MACnD,OAAOG,UAAU;IAAC;EACpB;EAEA;EACaC,YAAY;IAAA;IAAA;MACvB,MAAMJ,UAAU,GAAG,MAAI,CAACF,IAAI,CAACG,GAAG,CAAiBN,SAAS,CAACU,YAAY,CAAC;MACxE,MAAMC,SAAS,SAASZ,cAAc,CAACM,UAAU,CAAC;MAClD,OAAOM,SAAS;IAAC;EACnB;EAEA;EACaC,uBAAuB,CAClCC,WAAmB;IAAA;IAAA;MAEnB,IAAGA,WAAW,KAAG,IAAI,EAAE;MAGvB,MAAMR,UAAU,GAAG,MAAI,CAACF,IAAI,CAACG,GAAG,CAC9BN,SAAS,CAACc,wBAAwB,GAAGD,WAAW,CACjD;MACD,MAAMF,SAAS,SAASZ,cAAc,CAACM,UAAU,CAAC;MAClD,OAAOM,SAAS;IAAC;EACnB;EAEA;EACaI,UAAU,CAACC,OAAqB;IAAA;IAAA;MAC3C,MAAMX,UAAU,GAAG,MAAI,CAACF,IAAI,CAACc,IAAI,CAC/BjB,SAAS,CAACU,YAAY,EACtBM,OAAO,CACR;MACD,MAAMjB,cAAc,CAACM,UAAU,CAAC;IAAC;EACnC;EAEA;EACaa,aAAa,CAACC,SAAiB;IAAA;IAAA;MAC1C,MAAMd,UAAU,GAAG,MAAI,CAACF,IAAI,CAACiB,MAAM,CAACpB,SAAS,CAACU,YAAY,GAAGS,SAAS,CAAC;MACvE,MAAMpB,cAAc,CAACM,UAAU,CAAC;IAAC;EACnC;;AA5CWJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAFV;AAAM","names":["firstValueFrom","appConfig","DataService","constructor","http","getContinents","observable","get","continentsUrl","continents","getCountries","countriesUrl","countries","getCountriesByContinent","continentId","countriesByContinentsUrl","addCountry","country","post","deleteCountry","countryId","delete","factory","providedIn"],"sourceRoot":"","sources":["/Users/raniradzewsky/Library/Mobile Documents/com~apple~CloudDocs/Documents/school/John Bryce/My Projects/Tipping around the world - Angular/Frontend/src/app/services/data.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\n\nimport { ContinentModel } from '../models/continent-model';\nimport { CountryModel } from '../models/country-model';\nimport { appConfig } from '../utils/app-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  public constructor(private http: HttpClient) {}\n\n  //Get all continents:\n  public async getContinents(): Promise<ContinentModel[]> {\n    const observable = this.http.get<ContinentModel[]>(appConfig.continentsUrl);\n    const continents = await firstValueFrom(observable);\n    return continents;\n  }\n\n  //Get all countries:\n  public async getCountries(): Promise<CountryModel[]> {\n    const observable = this.http.get<CountryModel[]>(appConfig.countriesUrl);\n    const countries = await firstValueFrom(observable);\n    return countries;\n  }\n\n  //Get countries by continent:\n  public async getCountriesByContinent(\n    continentId: string\n  ): Promise<CountryModel[]> {\n    if(continentId===null) {\n        \n    }\n    const observable = this.http.get<CountryModel[]>(\n      appConfig.countriesByContinentsUrl + continentId\n    );\n    const countries = await firstValueFrom(observable);\n    return countries;\n  }\n\n  // Add country:\n  public async addCountry(country: CountryModel): Promise<void> {\n    const observable = this.http.post<CountryModel>(\n      appConfig.countriesUrl,\n      country\n    );\n    await firstValueFrom(observable);\n  }\n\n  // Delete country:\n  public async deleteCountry(countryId: string): Promise<void> {\n    const observable = this.http.delete(appConfig.countriesUrl + countryId);\n    await firstValueFrom(observable);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}